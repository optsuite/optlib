/-
Copyright (c) 2024 Shengyang Xu, Chenyi Li. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Shengyang Xu, Chenyi Li
-/
import Mathlib.Topology.Semicontinuous
import Mathlib.Analysis.Convex.Basic
import Optlib.Convex.Subgradient
import Optlib.Function.Lsmooth
import Optlib.Convex.StronglyConvex
import Optlib.Function.MinimaClosedFunction

set_option linter.unusedVariables false

/-!
 proximal operator
-/
noncomputable section

set_option linter.unusedSectionVars false

open Set InnerProductSpace Topology Filter

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [CompleteSpace E]
variable {x y y‚ÇÅ y‚ÇÇ : E} {s : Set E} {f : E ‚Üí ‚Ñù}

/-
  a point satisfies the proximal property if it is a minimizer of the function f(u)+1/2‚Äñu-x‚Äñ¬≤
-/
def prox_prop (f : E ‚Üí ‚Ñù) (x : E) (xm : E) : Prop :=
  IsMinOn (fun u ‚Ü¶ f u + ‚Äñu - x‚Äñ ^ 2 / 2) univ xm

/-
  the set of all points that satisfy the proximal property
-/
def prox_set (f : E ‚Üí ‚Ñù) (x : E) : Set E := {u | prox_prop f x u}

/-
  if the proximal set is nonempty then we can choose the point that satisfies the proximal property
-/
def prox_point (f : E ‚Üí ‚Ñù) (x : E) (h : ‚àÉ y, prox_set f x y) : E :=
  Classical.choose h

variable [ProperSpace E]
/-
  The existence of the proximal for proper lower-semi-continuous function
-/
theorem prox_set_compact_of_lowersemi (f : E ‚Üí ‚Ñù) (hc : LowerSemicontinuous f)
    (lbdf : BddBelow (f '' univ)) :
    ‚àÄ x, Nonempty (prox_set f x) ‚àß IsCompact (prox_set f x) := by
  intro x
  let g := fun u ‚Ü¶ f u + ‚Äñu - x‚Äñ ^ 2 / 2
  let epi := {p : (E √ó ‚Ñù) | g p.1 ‚â§ p.2}
  let S := {y : E | g y ‚â§ g x}
  have eq : S = (g ‚Åª¬π' Set.Iic (g x)) := by constructor
  let ImS := {g y | y ‚àà S}
  have neImS : Set.Nonempty ImS := by
    use g x; simp [ImS]; use x; simp [S]
  rcases lbdf with ‚ü®L, Lbound‚ü©
  rw [mem_lowerBounds] at Lbound
  have boundg : ‚àÄ (x : E), L ‚â§ g x := by
    intro z
    calc
      L ‚â§ f z := by
        specialize Lbound (f z); simp at Lbound; exact Lbound
      _ ‚â§ f z + ‚Äñz - x‚Äñ ^ 2 / 2 := by
        simp; linarith [sq_nonneg ‚Äñz - x‚Äñ]
  have hg : LowerSemicontinuous g := by
    refine hc.add ?_
    have hcont : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2 / 2) := by
      have h1 : Continuous (fun z : E => ‚Äñz - x‚Äñ) := (continuous_id.sub continuous_const).norm
      have h2 : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2) := h1.pow 2
      have h3 : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2 * (1 / 2)) := h2.mul continuous_const
      simpa [div_eq_mul_inv, mul_comm] using h3
    exact hcont.lowerSemicontinuous
  have S_bddbelow : BddBelow ImS := by
    use L; rw [mem_lowerBounds]
    rintro gy ‚ü®y0, _, gyeq‚ü©; rw [‚Üê gyeq]; exact boundg y0
  have epi_closed : IsClosed epi := by
    apply bounded_lowersemicontinuous_to_epi_closed
    ¬∑ exact lowerSemicontinuousOn_univ_iff.2 hg
    use L
  have closeds : IsClosed S := by
    rw [eq]
    rw [lowerSemicontinuous_iff_isClosed_preimage] at hg
    exact hg (g x)
  have compacts : IsCompact S := by
    let B := Metric.closedBall x (f x - L + 1)
    have sinb : S ‚äÜ B := by
      intro u uin; simp [S] at uin
      apply mem_closedBall_iff_norm.2
      have norm_bound: ‚Äñu - x‚Äñ ‚â§ f x - L + 1 := by
        have ieq : L + ‚Äñu - x‚Äñ ^ 2 / 2 ‚â§ f x:= by
          calc
          L + ‚Äñu - x‚Äñ ^ 2 / 2 ‚â§ g u := by
            simp [g]; specialize Lbound (f u); simp at Lbound; exact Lbound
          _ ‚â§ f x := by simp [g] at uin; exact uin
        rw [‚Üê le_sub_iff_add_le'] at ieq
        have aux {a b : ‚Ñù} (h1 : a ^ 2 / 2 ‚â§ b) (h2 : 0 ‚â§ a) : a ‚â§ b + 1 := by
          rw [div_le_iff‚ÇÄ] at h1; rw [‚Üê abs_eq_self] at h2; rw [‚Üê h2]
          apply abs_le_of_sq_le_sq; rw [add_sq]; simp
          calc
            a ^ 2 ‚â§ b * 2 := h1
            _ ‚â§ b ^ 2 + 2 * b + 1 := by
              rw [add_right_comm, mul_comm]; simp; linarith [sq_nonneg b]
          calc
            0 ‚â§ a ^ 2 / 2 := by linarith [sq_nonneg a]
            _ ‚â§ b * 2 / 2 := by
              have h := mul_le_mul_of_nonneg_right h1 (by norm_num : 0 ‚â§ (1 / 2 : ‚Ñù))
              simpa [div_eq_mul_inv, mul_comm, mul_left_comm, mul_assoc] using h
            _ ‚â§ b + 1 := by simp
          linarith
        apply aux ieq
        apply norm_nonneg
      exact norm_bound
    have compactb : IsCompact B := isCompact_closedBall x (f x - L + 1)
    rw [‚Üê closure_eq_iff_isClosed] at closeds; rw [‚Üê closeds]
    apply IsCompact.closure_of_subset compactb sinb
  rcases exists_seq_tendsto_sInf neImS S_bddbelow with ‚ü®fx, _, cfx, fxs‚ü©
  choose xn xsub xeq using fxs
  rcases IsCompact.tendsto_subseq compacts xsub with ‚ü®x', _, k, mono, cxk‚ü©
  have cfxk : Filter.Tendsto (g ‚àò xn ‚àò k) Filter.atTop (ùìù (sInf ImS)) := by
    have xkeq : ‚àÄ (n : ‚Ñï), (g ‚àò xn ‚àò k) n = (fx ‚àò k) n := fun n => xeq <| k n
    rw [tendsto_congr xkeq]
    apply Tendsto.comp cfx (StrictMono.tendsto_atTop mono)
  have inepi : (x', sInf ImS) ‚àà epi := by
    let p := fun c ‚Ü¶ (((fun n ‚Ü¶ xn n) ‚àò k) c, (g ‚àò xn ‚àò k) c)
    have pnin :  ‚àÄ c : ‚Ñï, p c ‚àà epi := by
      simp [epi]
      exact fun c ‚Ü¶
        Std.IsPreorder.le_refl (g (p c).1)
    apply IsClosed.isSeqClosed epi_closed pnin
    show Tendsto (fun c ‚Ü¶ (((fun n ‚Ü¶ xn n) ‚àò k) c, (g ‚àò xn ‚àò k) c)) atTop (ùìù (x', sInf ImS))
    apply Tendsto.prodMk_nhds cxk cfxk
  have minima_ieq : g x' ‚â§ sInf ImS := inepi
  have minima : ‚àÄ w : E, g x' ‚â§ g w := by
    intro w
    by_cases hw : w ‚àà S
    ¬∑ have gwin : g w ‚àà ImS := by use w
      have legw : sInf ImS ‚â§ g w := by
        rw [Real.sInf_le_iff S_bddbelow neImS]
        intro _ epos; use g w; use gwin; linarith
      linarith
    ¬∑ have gwnin : g x < g w := by
        simp [g, S] at hw; simp [g]; exact hw
      have gxin : g x ‚àà ImS := by use x; simp [g, S]
      have legw : sInf ImS ‚â§ g w := by
        rw [Real.sInf_le_iff S_bddbelow neImS]
        intro _ epos; use g x; use gxin; linarith
      linarith
  constructor
  ¬∑ use x'; simp [prox_set]; rw [prox_prop, isMinOn_iff]
    intro v _; exact minima v
  ¬∑ have aux : prox_set f x = {x | IsMinOn g univ x} := by
      simp [prox_set]; ext y
      constructor
      ¬∑ intro yin; simp [prox_prop] at yin; simp; exact yin
      ¬∑ intro yin; simp; rw [prox_prop]
        simp at yin; exact yin
    have nes : Nonempty S := by use x; simp [S]
    rw [eq] at compacts; rw [eq] at nes
    rw [aux] -- apply IsCompact_isMinOn_of_isCompact_preimage hc nes compacts
    have seq : {x | IsMinOn g univ x} = (g ‚Åª¬π' Set.Iic (g x')) := by
      ext y
      constructor
      ¬∑ exact fun hxx => isMinOn_iff.mp hxx x' trivial
      ¬∑ intro yin; simp at yin
        exact fun x xuniv => le_trans yin ((fun x _ => minima x) x xuniv)
    simp only [seq]
    apply IsCompact.of_isClosed_subset compacts (LowerSemicontinuous.isClosed_preimage hg (g x'))
    apply Set.preimage_mono
    simp only [Set.Iic_subset_Iic]
    exact minima x

theorem prox_set_compact_of_convex (f : E ‚Üí ‚Ñù) (hc : ContinuousOn f univ)
    (hconv : ConvexOn ‚Ñù univ f) :
    ‚àÄ x, Nonempty (prox_set f x) ‚àß IsCompact (prox_set f x) := by
  intro x
  have subd: ‚àÉ z : E, Nonempty (SubderivAt f z) := by
    use x; apply SubderivAt.nonempty hconv hc
  have hc : LowerSemicontinuous f :=
    Continuous.lowerSemicontinuous (continuousOn_univ.mp hc)
  rcases subd with ‚ü®z, a, ain‚ü©
  rw [‚Üê mem_SubderivAt, HasSubgradientAt] at ain
  let g := fun u ‚Ü¶ f u + ‚Äñu - x‚Äñ ^ 2 / 2
  let epi := {p : (E √ó ‚Ñù) | g p.1 ‚â§ p.2}
  have second_lower_bound (y : E) : g y ‚â• f z + ‚ü™a, y - z‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2 / 2 := by
    have h := ain y
    have h' := add_le_add_right h (‚Äñy - x‚Äñ ^ 2 / 2)
    simpa [g, add_comm, add_left_comm, add_assoc] using h'
  have lower_bound (y : E) : f z + ‚ü™a, x - z‚ü´_‚Ñù - ‚Äña‚Äñ ^ 2 / 2 ‚â§ g y := by
    have : y - z = x - z + (y - x) := by simp
    specialize second_lower_bound y
    rw [this, inner_add_right, ‚Üê add_assoc, add_assoc] at second_lower_bound
    have : 0 ‚â§ ‚Äña‚Äñ ^ 2 / 2 + ‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2 / 2 := by
      have hrewrite :
          ‚Äña‚Äñ ^ 2 / 2 + ‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2 / 2
            = ‚Äña + (y - x)‚Äñ ^ 2 / 2 := by
        have h1 :
            (‚Äña‚Äñ ^ 2 + 2 * ‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2) / 2
              = ‚Äña + (y - x)‚Äñ ^ 2 / 2 := by
          simpa using
            (congrArg (fun t : ‚Ñù => t / 2) (norm_add_sq_real a (y - x))).symm
        have h2 :
            ‚Äña‚Äñ ^ 2 / 2 + ‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2 / 2
              = (‚Äña‚Äñ ^ 2 + 2 * ‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2) / 2 := by
          ring
        simpa [h2] using h1
      have hnonneg : 0 ‚â§ ‚Äña + (y - x)‚Äñ ^ 2 / 2 := by
        exact div_nonneg (sq_nonneg ‚Äña + (y - x)‚Äñ) (by norm_num)
      simpa [hrewrite] using hnonneg
    calc
      f z + ‚ü™a, x - z‚ü´_‚Ñù - ‚Äña‚Äñ ^ 2 / 2 ‚â§ f z + ‚ü™a, x - z‚ü´_‚Ñù - ‚Äña‚Äñ ^ 2 / 2 +
        (‚Äña‚Äñ ^ 2 / 2 + ‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2 / 2) := le_add_of_nonneg_right this
      _ = f z + ‚ü™a, x - z‚ü´_‚Ñù + (‚ü™a, y - x‚ü´_‚Ñù + ‚Äñy - x‚Äñ ^ 2 / 2) := by ring
      _ ‚â§ g y := second_lower_bound
  have hg : LowerSemicontinuous g := by
    have hcont : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2 / 2) := by
      have h1 : Continuous (fun z : E => ‚Äñz - x‚Äñ) := (continuous_id.sub continuous_const).norm
      have h2 : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2) := h1.pow 2
      have h3 : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2 * (1 / 2)) := h2.mul continuous_const
      simpa [div_eq_mul_inv, mul_comm] using h3
    exact hc.add hcont.lowerSemicontinuous
  have epi_closed : IsClosed epi := by
    apply bounded_lowersemicontinuous_to_epi_closed
    ¬∑ exact lowerSemicontinuousOn_univ_iff.2 hg
    refine ‚ü®f z + ‚ü™a, x - z‚ü´_‚Ñù - ‚Äña‚Äñ ^ 2 / 2, ?_‚ü©
    intro y; exact lower_bound y
  let S := {y : E| g y ‚â§ g z}
  have eq : S = (g ‚Åª¬π' Set.Iic (g z)) := by constructor
  let ImS := {g y | y ‚àà S}
  have neImS : Set.Nonempty ImS := by
    use g z; simp [ImS, S]; use z
  have S_bddbelow : BddBelow ImS := by
    use (f z + ‚ü™a, x - z‚ü´_‚Ñù - ‚Äña‚Äñ ^ 2 / 2)
    rw [mem_lowerBounds]
    rintro gy ‚ü®y0, _, gyeq‚ü©
    rw [‚Üê gyeq]; exact lower_bound y0
  have closeds : IsClosed S := by
    rw [eq]
    rw [lowerSemicontinuous_iff_isClosed_preimage] at hg
    exact hg (g z)
  have compacts : IsCompact S := by
    let B := Metric.closedBall (x - a) (‚Äñz - (x - a)‚Äñ + 2)
    have sinb : S ‚äÜ B := by
      intro u uin
      simp [S] at uin
      apply mem_closedBall_iff_norm.2
      have ieq : f z + ‚ü™a, u - z‚ü´_‚Ñù + ‚Äñu - x‚Äñ ^ 2 / 2 ‚â§ f z + ‚Äñz - x‚Äñ ^ 2 / 2 + 1 := by
        calc
          f z + ‚ü™a, u - z‚ü´_‚Ñù + ‚Äñu - x‚Äñ ^ 2 / 2 ‚â§ g u := second_lower_bound u
          _ ‚â§ f z + ‚Äñz - x‚Äñ ^ 2 / 2 := uin
          _ ‚â§ f z + ‚Äñz - x‚Äñ ^ 2 / 2 + 1 := by linarith
          _ ‚â§ f z + ‚Äñz - x‚Äñ ^ 2 / 2 + 1 := by linarith
      rw [add_assoc, add_assoc, add_le_add_iff_left] at ieq
      have eq : ‚ü™a, u - z‚ü´_‚Ñù + ‚Äñu - x‚Äñ ^ 2 / 2 =
          (‚Äñu - (x - a)‚Äñ ^ 2 - ‚Äña‚Äñ ^ 2 + 2 * ‚ü™x - z, a‚ü´_‚Ñù) / 2 := by
        field_simp; rw [‚Üê sub_add, norm_add_sq_real]; ring_nf
        rw [add_assoc, ‚Üê add_mul, ‚Üê inner_add_left, add_comm, real_inner_comm]; simp
      rw [eq] at ieq
      have ieq2 : ‚Äñu - (x - a)‚Äñ ^ 2 ‚â§ ‚Äñz - (x - a)‚Äñ ^ 2 + 2 := by
        -- clear the division by 2 on both sides
        have ieq' :=
          (mul_le_mul_of_nonneg_right ieq (by norm_num : 0 ‚â§ (2 : ‚Ñù)))
        -- simplify ((¬∑)/2)*2 = ¬∑ and (¬∑/2 + 1)*2 = ¬∑ + 2
        have ieq' :
            ‚Äñu - (x - a)‚Äñ ^ 2 - ‚Äña‚Äñ ^ 2 + 2 * ‚ü™x - z, a‚ü´_‚Ñù ‚â§ ‚Äñz - x‚Äñ ^ 2 + 2 := by
          have h2 : (2 : ‚Ñù) ‚â† 0 := by norm_num
          simpa [add_mul, mul_add, div_eq_mul_inv, h2] using ieq'
        rw [sub_add, sub_le_iff_le_add] at ieq'
        rw [add_right_comm, add_comm (‚Äñz - x‚Äñ ^ 2), norm_sub_rev z x] at ieq'
        rw [real_inner_comm, ‚Üê norm_sub_sq_real, ‚Üê sub_add a, sub_add_comm] at ieq'
        rw [sub_add] at ieq'
        exact ieq'
      have : |‚Äñz - (x - a)‚Äñ + 2| = ‚Äñz - (x - a)‚Äñ + 2 := by
        apply abs_of_pos; apply add_pos_of_nonneg_of_pos (norm_nonneg (z - (x - a)))
        simp
      rw [‚Üê abs_norm, ‚Üê this, ‚Üê sq_le_sq, add_sq]
      calc
        ‚Äñu - (x - a)‚Äñ ^ 2 ‚â§ ‚Äñz - (x - a)‚Äñ ^ 2 + 2 := ieq2
        _ ‚â§ ‚Äñz - (x - a)‚Äñ ^ 2 + 2 * ‚Äñz - (x - a)‚Äñ * 2 + 2 ^ 2 := by
          rw [add_assoc, add_le_add_iff_left]; apply le_add_of_nonneg_of_le
          simp; norm_num
--      exact norm_bound
    have compactb : IsCompact B := isCompact_closedBall (x - a) (‚Äñz - (x - a)‚Äñ + 2)
    rw [‚Üê closure_eq_iff_isClosed] at closeds; rw [‚Üê closeds]
    apply IsCompact.closure_of_subset compactb sinb
  rcases exists_seq_tendsto_sInf neImS S_bddbelow with ‚ü®fx, _, cfx, fxs‚ü©
  choose xn xsub xeq using fxs
  rcases IsCompact.tendsto_subseq compacts xsub with ‚ü®x', _, k, mono, cxk‚ü©
  have cfxk : Filter.Tendsto (g ‚àò xn ‚àò k) Filter.atTop (ùìù (sInf ImS)) := by
    have xkeq : ‚àÄ (n : ‚Ñï), (g ‚àò xn ‚àò k) n = (fx ‚àò k) n := fun n => xeq <| k n
    rw [tendsto_congr xkeq]
    apply Tendsto.comp cfx (StrictMono.tendsto_atTop mono)
  have inepi : (x', sInf ImS) ‚àà epi := by
    let p := fun c ‚Ü¶ (((fun n ‚Ü¶ xn n) ‚àò k) c, (g ‚àò xn ‚àò k) c)
    have pnin :  ‚àÄ c : ‚Ñï, p c ‚àà epi := by simp [epi]; exact fun c ‚Ü¶ Std.IsPreorder.le_refl (g (p c).1)
    apply IsClosed.isSeqClosed epi_closed pnin
    show Tendsto (fun c ‚Ü¶ (((fun n ‚Ü¶ xn n) ‚àò k) c, (g ‚àò xn ‚àò k) c)) atTop (ùìù (x', sInf ImS))
    apply Tendsto.prodMk_nhds cxk cfxk
  have minima_ieq : g x' ‚â§ sInf ImS := inepi
  have minima : ‚àÄ w : E, g x' ‚â§ g w := by
      intro w
      by_cases hw : w ‚àà S
      ¬∑ have gwin : g w ‚àà ImS := by use w
        have legw : sInf ImS ‚â§ g w := by
          rw [Real.sInf_le_iff S_bddbelow neImS]
          intro _ epos; use g w; use gwin; linarith
        linarith
      ¬∑ have gwnin : g z < g w := by
          simp [S] at hw; simp [g]; exact hw
        have gzin : g z ‚àà ImS := by use z; simp [S]
        have legw : sInf ImS ‚â§ g w := by
          rw [Real.sInf_le_iff S_bddbelow neImS]
          intro _ epos; use g z; use gzin; linarith
        linarith
  constructor
  ¬∑ use x'; simp [prox_set]; rw [prox_prop, isMinOn_iff]
    intro v _; exact minima v
  ¬∑ have aux : prox_set f x = {x | IsMinOn g univ x} := by
      simp [prox_set]; ext y
      constructor
      ¬∑ intro yin; simp [prox_prop] at yin; simp; exact yin
      ¬∑ intro yin; simp; rw [prox_prop]
        simp at yin; exact yin
    have nes : Nonempty S := by use z; simp [S]
    rw [eq] at compacts; rw [eq] at nes
    rw [aux] -- apply IsCompact_isMinOn_of_isCompact_preimage hc nes compacts
    have seq : {x | IsMinOn g univ x} = (g ‚Åª¬π' Set.Iic (g x')) := by
      ext y
      constructor
      ¬∑ exact fun hxx => isMinOn_iff.mp hxx x' trivial
      ¬∑ intro yin; simp at yin
        exact fun x xuniv => le_trans yin ((fun x _ => minima x) x xuniv)
    simp only [seq]
    apply IsCompact.of_isClosed_subset compacts (LowerSemicontinuous.isClosed_preimage hg (g x'))
    apply Set.preimage_mono
    simp only [Set.Iic_subset_Iic]
    exact minima z

theorem prox_well_define (f : E ‚Üí ‚Ñù) (hc : LowerSemicontinuous f) (lbdf : BddBelow (f '' univ)) :
    ‚àÄ x, ‚àÉ y, prox_prop f x y := by
  intro x
  rcases (prox_set_compact_of_lowersemi f hc lbdf x).1 with ‚ü®y, yprop‚ü©
  use y; simp [prox_set] at yprop; exact yprop

theorem prox_well_define_convex (f : E ‚Üí ‚Ñù) (hc : ContinuousOn f univ)
    (hconv : ConvexOn ‚Ñù univ f) :
  ‚àÄ x, ‚àÉ y, prox_prop f x y := by
  intro x
  rcases (prox_set_compact_of_convex f hc hconv x).1 with ‚ü®y, yprop‚ü©
  use y; simp [prox_set] at yprop; exact yprop

/-
  the definition of the proximal operator for a closed convex function
-/
def prox_point_c (f : E ‚Üí ‚Ñù) (x : E) (hc : LowerSemicontinuous f)
    (lbdf : BddBelow (f '' univ)) : E :=
  have h : ‚àÉ y, prox_set f x y := by
    apply prox_well_define f hc lbdf x
  Classical.choose h

def prox_point_c' (f : E ‚Üí ‚Ñù) (x : E) (hc : ContinuousOn f univ)
    (hconv : ConvexOn ‚Ñù univ f) : E :=
  have h : ‚àÉ y, prox_set f x y := by
    apply prox_well_define_convex f hc hconv x
  Classical.choose h

section properties

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]

variable {s : Set E} {f : E ‚Üí ‚Ñù} {u x y‚ÇÅ y‚ÇÇ : E} {t : ‚Ñù}

open Set InnerProductSpace

/-
  The uniqueness of the proximal for proper convex function
-/
theorem prox_unique_of_convex (f : E ‚Üí ‚Ñù) (x : E) (hfun : ConvexOn ‚Ñù univ f)
    (h‚ÇÅ : prox_prop f x y‚ÇÅ) (h‚ÇÇ : prox_prop f x y‚ÇÇ) : y‚ÇÅ = y‚ÇÇ := by
  let g := fun u ‚Ü¶ f u + ‚Äñu - x‚Äñ ^ 2 / 2
  let m := (1 : ‚Ñù)
  have gsconv : StrongConvexOn univ m g := by
    apply strongconvex_of_convex_add_sq
    show ConvexOn ‚Ñù univ f; apply hfun
  rw [prox_prop] at h‚ÇÅ
  rw [prox_prop] at h‚ÇÇ
  apply Strongly_Convex_Unique_Minima gsconv
  apply h‚ÇÅ; apply h‚ÇÇ; simp; simp; norm_num
/-
   The square of norm is convex on a convex set
-/
lemma convex_of_norm_sq {s : Set E} (x : E) (conv: Convex ‚Ñù s) :
    ConvexOn ‚Ñù s (fun (u : E) ‚Ü¶ ‚Äñu - x‚Äñ ^ 2 / 2) := by
  rw [ConvexOn]; use conv
  intro y _ z _ a b anneg bnneg absum1
  have eq1 : a ‚Ä¢ y + b ‚Ä¢ z - x = a ‚Ä¢ (y - x) + b ‚Ä¢ (z - x) := by
    rw [smul_sub, smul_sub, add_comm_sub, sub_sub, ‚Üê add_smul, add_comm b a, absum1,
        one_smul, ‚Üê add_sub]
  rw [eq1]
  have ieq1 (u v : E) :
      ‚Äña ‚Ä¢ u + b ‚Ä¢ v‚Äñ ^ 2 / 2 ‚â§ a * (‚Äñu‚Äñ ^ 2 / 2) + b * (‚Äñv‚Äñ ^ 2 / 2) := by
    have hbase :
        ‚Äña ‚Ä¢ u + b ‚Ä¢ v‚Äñ ^ 2 ‚â§ a * ‚Äñu‚Äñ ^ 2 + b * ‚Äñv‚Äñ ^ 2 := by
      rw [norm_add_sq_real, add_comm, ‚Üê add_assoc]
      rw [norm_smul, norm_smul, mul_pow, mul_pow]; simp
      nth_rw 3 [‚Üê mul_one a]; nth_rw 3 [‚Üê one_mul b]
      rw [‚Üê absum1]; ring_nf; rw [add_right_comm]
      apply add_le_add_right
      rw [add_comm]; apply add_le_add_right
      calc
        ‚ü™a ‚Ä¢ u, b ‚Ä¢ v‚ü´_‚Ñù * 2
            ‚â§ ‚Äña ‚Ä¢ u‚Äñ * ‚Äñb ‚Ä¢ v‚Äñ * 2 := by
              have h := real_inner_le_norm (a ‚Ä¢ u) (b ‚Ä¢ v)
              exact mul_le_mul_of_nonneg_right h (by norm_num)
        _ = a * b * (2 * ‚Äñu‚Äñ * ‚Äñv‚Äñ) := by
          rw [norm_smul, norm_smul]; simp
          rw [abs_of_nonneg anneg, abs_of_nonneg bnneg]; ring
        _ ‚â§ b * ‚Äñv‚Äñ ^ 2 * a + b * a * ‚Äñu‚Äñ ^ 2 := by
          have hab_nonneg : 0 ‚â§ a * b := mul_nonneg anneg bnneg
          have hineq : 2 * ‚Äñu‚Äñ * ‚Äñv‚Äñ ‚â§ ‚Äñu‚Äñ ^ 2 + ‚Äñv‚Äñ ^ 2 := by
            simpa using two_mul_le_add_pow_two (‚Äñu‚Äñ) (‚Äñv‚Äñ)
          have hmul :
              a * b * (2 * ‚Äñu‚Äñ * ‚Äñv‚Äñ) ‚â§ a * b * (‚Äñu‚Äñ ^ 2 + ‚Äñv‚Äñ ^ 2) :=
            mul_le_mul_of_nonneg_left hineq hab_nonneg
          simp; grind
    have : (1 / 2 : ‚Ñù) * ‚Äña ‚Ä¢ u + b ‚Ä¢ v‚Äñ ^ 2
              ‚â§ (1 / 2 : ‚Ñù) * (a * ‚Äñu‚Äñ ^ 2 + b * ‚Äñv‚Äñ ^ 2) :=
      mul_le_mul_of_nonneg_left hbase (by norm_num)
    simp; grind
  have h := ieq1 (y - x) (z - x)
  simpa [smul_eq_mul, div_eq_mul_inv, mul_add, mul_comm, mul_left_comm, mul_assoc] using h

/-
  Sub-derivative at x equal to sub-derivative within univ at x
-/
lemma Subderivat_eq_SubderivWithinAt_univ (f : E ‚Üí ‚Ñù) :
    SubderivWithinAt f univ u = SubderivAt f u := by
    apply subset_antisymm
    ¬∑ intro p pin
      rw [SubderivWithinAt] at pin
      rw [‚Üê mem_SubderivAt, ‚Üê hasSubgradientWithinAt_univ]
      apply pin
    ¬∑ intro p pin
      rw [‚Üê mem_SubderivAt, ‚Üê hasSubgradientWithinAt_univ] at pin;
      rw [SubderivWithinAt]
      apply pin

/-
  relation of proximal between a function and its shift
-/
theorem proximal_shift (a : E) {t : ‚Ñù} (tnz : t ‚â† 0) (f : E ‚Üí ‚Ñù):
    ‚àÄ z : E, prox_prop (fun x ‚Ü¶ f (t ‚Ä¢ x + a)) x z ‚Üî
      prox_prop (t ^ 2 ‚Ä¢ f) (t ‚Ä¢ x + a) (t ‚Ä¢ z + a) := by
  intro z
  rw [prox_prop, prox_prop, isMinOn_univ_iff, isMinOn_univ_iff]
  simp
  constructor
  ¬∑ intro cond y
    specialize cond (t‚Åª¬π ‚Ä¢ (y - a))
    rw [‚Üê smul_assoc, smul_eq_mul, mul_inv_cancel‚ÇÄ] at cond
    simp at cond
    calc
      t ^ 2 * f (t ‚Ä¢ z + a) + ‚Äñt ‚Ä¢ z - t ‚Ä¢ x‚Äñ ^ 2 / 2 =
          t ^ 2 * (f (t ‚Ä¢ z + a) + ‚Äñz - x‚Äñ ^ 2 / 2) := by
        rw [‚Üê smul_sub, norm_smul, mul_pow, mul_add]; field_simp; simp; grind
      _ ‚â§ t ^ 2 * (f y + ‚Äñt‚Åª¬π ‚Ä¢ (y - a) - x‚Äñ ^ 2 / 2) := by
        rw [mul_le_mul_iff_right‚ÇÄ]; use cond; rw [sq_pos_iff]; use tnz
      _ = t ^ 2 * f y + ‚Äñt ‚Ä¢ ((1 / t) ‚Ä¢ (y - a) - x)‚Äñ ^ 2 / 2 := by
        rw [mul_add, norm_smul, mul_pow]; field_simp; simp; grind
      _ = t ^ 2 * f y + ‚Äñy - (t ‚Ä¢ x + a)‚Äñ ^ 2 / 2 := by
        rw [smul_sub, ‚Üê smul_assoc, smul_eq_mul, ‚Üê sub_sub, sub_right_comm]; field_simp; simp
    use tnz
  ¬∑ intro cond y
    specialize cond (t ‚Ä¢ y + a)
    rw [‚Üê smul_sub, norm_smul, mul_pow] at cond; simp at cond
    rw [‚Üê smul_sub, norm_smul, mul_pow] at cond; simp at cond
    rw [mul_div_assoc, ‚Üê mul_add, mul_div_assoc, ‚Üê mul_add] at cond
    rw [mul_le_mul_iff_right‚ÇÄ] at cond; use cond; rw [sq_pos_iff]; use tnz

/-
  relation of proximal between a function and its scale
-/
theorem proximal_scale {t : ‚Ñù} (tpos : 0 < t) (f : E ‚Üí ‚Ñù):
    ‚àÄ z : E, prox_prop (fun x ‚Ü¶ t ‚Ä¢ f (t‚Åª¬π ‚Ä¢ x)) x z ‚Üî
      prox_prop (t‚Åª¬π ‚Ä¢ f) (t‚Åª¬π ‚Ä¢ x) (t‚Åª¬π ‚Ä¢ z) := by
  intro z
  rw [prox_prop, prox_prop, isMinOn_univ_iff, isMinOn_univ_iff]
  simp
  constructor
  ¬∑ intro cond y
    specialize cond (t ‚Ä¢ y)
    have tsq : 0 < t ^ 2 := by field_simp; aesop
    rw [‚Üê mul_le_mul_iff_right‚ÇÄ tsq]
    calc
      t ^ 2 * (t‚Åª¬π * f (t‚Åª¬π ‚Ä¢ z) + ‚Äñt‚Åª¬π ‚Ä¢ z - t‚Åª¬π ‚Ä¢ x‚Äñ ^ 2 / 2) =
          t * f (t‚Åª¬π ‚Ä¢ z) + ‚Äñz - x‚Äñ ^ 2 / 2 := by
        rw [‚Üê smul_sub, norm_smul, mul_pow, mul_add, pow_two, ‚Üê mul_assoc, mul_assoc _ _ (t‚Åª¬π)]
        rw [mul_inv_cancel‚ÇÄ, mul_div_assoc, ‚Üê mul_assoc]; simp
        rw [‚Üê pow_two, mul_inv_cancel‚ÇÄ]; repeat simp; repeat linarith
      _ ‚â§ t * f (t‚Åª¬π ‚Ä¢ t ‚Ä¢ y) + ‚Äñt ‚Ä¢ y - x‚Äñ ^ 2 / 2 := cond
      _ = t ^ 2 * (t‚Åª¬π * f y) + ‚Äñt ‚Ä¢ (y - t‚Åª¬π ‚Ä¢ x)‚Äñ ^ 2 / 2 := by
        rw [pow_two t, ‚Üê mul_assoc, mul_assoc _ _ (t‚Åª¬π), mul_inv_cancel‚ÇÄ]
        rw [‚Üê smul_assoc, smul_eq_mul, inv_mul_cancel‚ÇÄ]; simp
        rw [smul_sub, ‚Üê smul_assoc, smul_eq_mul, mul_inv_cancel‚ÇÄ]; simp; repeat linarith
      _ = t ^ 2 * (t‚Åª¬π * f y + ‚Äñy - t‚Åª¬π ‚Ä¢ x‚Äñ ^ 2 / 2) := by
        rw [mul_add, norm_smul, mul_pow]; field_simp; simp; grind
  ¬∑ intro cond y
    specialize cond (t‚Åª¬π ‚Ä¢ y)
    have tsq : 0 < t ^ 2 := by field_simp; exact sq_pos_of_pos tpos
    rw [‚Üê mul_le_mul_iff_right‚ÇÄ tsq] at cond
    calc
      t * f (t‚Åª¬π ‚Ä¢ z) + ‚Äñz - x‚Äñ ^ 2 / 2 =
          t ^ 2 * (t‚Åª¬π * f (t‚Åª¬π ‚Ä¢ z) + ‚Äñt‚Åª¬π ‚Ä¢ z - t‚Åª¬π ‚Ä¢ x‚Äñ ^ 2 / 2) := by
        rw [‚Üê smul_sub, norm_smul, mul_pow, mul_add, pow_two t, ‚Üê mul_assoc, mul_assoc _ _ (t‚Åª¬π)]
        rw [mul_inv_cancel‚ÇÄ, mul_div_assoc, ‚Üê mul_assoc]; simp
        rw [‚Üê pow_two, mul_inv_cancel‚ÇÄ]; repeat simp; repeat linarith
      _ ‚â§ t ^ 2 * (t‚Åª¬π * f (t‚Åª¬π ‚Ä¢ y) + ‚Äñt‚Åª¬π ‚Ä¢ y - t‚Åª¬π ‚Ä¢ x‚Äñ ^ 2 / 2) := cond
      _ = t ^ 2 * (t‚Åª¬π * f (t‚Åª¬π ‚Ä¢ y)) + ‚Äñt ‚Ä¢ (t‚Åª¬π ‚Ä¢ y - t‚Åª¬π ‚Ä¢ x)‚Äñ ^ 2 / 2 := by
        rw [mul_add, norm_smul, mul_pow]; field_simp; simp; grind
      _ = t * f (t‚Åª¬π ‚Ä¢ y) + ‚Äñy - x‚Äñ ^ 2 / 2 := by
        rw [pow_two t, ‚Üê mul_assoc, mul_assoc _ _ (t‚Åª¬π), mul_inv_cancel‚ÇÄ]
        rw [smul_sub, ‚Üê smul_assoc, smul_eq_mul, mul_inv_cancel‚ÇÄ]; simp
        rw [‚Üê smul_assoc, smul_eq_mul, mul_inv_cancel‚ÇÄ]; simp; repeat linarith

/-
  change of proximal when added a linear components
-/
theorem proximal_add_linear (a : E) (f : E ‚Üí ‚Ñù):
    ‚àÄ z : E, prox_prop (fun x ‚Ü¶ f x + ‚ü™a, x‚ü´_‚Ñù) x z ‚Üî
      prox_prop f (x - a) z := by
  intro z
  rw [prox_prop, prox_prop, isMinOn_univ_iff, isMinOn_univ_iff]
  have aux (v : E) : ‚Äñv - (x - a)‚Äñ ^ 2 / 2 =
      ‚Äñv - x‚Äñ ^ 2 / 2 + ‚ü™a, v‚ü´_‚Ñù + (‚Äña‚Äñ ^ 2 / 2 - ‚ü™a, x‚ü´_‚Ñù) := by
    have hx : v - (x - a) = (v - x) + a := by
      simp [sub_eq_add_neg, add_comm, add_left_comm]
    have h := norm_add_sq_real (v - x) a
    have h' := congrArg (fun t : ‚Ñù => t / 2) (by simpa [hx] using h)
    have h2 : (2 : ‚Ñù) ‚â† 0 := by norm_num
    have hinner : ‚ü™v - x, a‚ü´_‚Ñù = ‚ü™a, v‚ü´_‚Ñù - ‚ü™a, x‚ü´_‚Ñù := by
      simp [real_inner_comm, inner_sub_right]
    grind
  constructor
  ¬∑ intro cond y
    specialize cond y
    grind
  ¬∑ intro cond y
    specialize cond y
    grind

/-
  change of proximal when added a square components
-/
theorem proximal_add_sq (a : E) {l : ‚Ñù} (lpos : 0 < l) (f : E ‚Üí ‚Ñù):
    ‚àÄ z : E, prox_prop (fun x ‚Ü¶ f x + l / 2 * ‚Äñx - a‚Äñ ^ 2) x z ‚Üî
      prox_prop ((1 / (l + 1)) ‚Ä¢ f) ((1 / (l + 1)) ‚Ä¢ (x + l ‚Ä¢ a)) z := by
  intro z
  rw [prox_prop, prox_prop, isMinOn_univ_iff, isMinOn_univ_iff]
  have aux (v : E) : ‚Äñv - (1 / (l + 1)) ‚Ä¢ (x + l ‚Ä¢ a)‚Äñ ^ 2 / 2 =
      (l + 1)‚Åª¬π * (l / 2 * ‚Äñv - a‚Äñ ^ 2 + ‚Äñv - x‚Äñ ^ 2 / 2 + (((l + 1)‚Åª¬π * (‚Äñx + l ‚Ä¢ a‚Äñ ^ 2)
        - ‚Äñx‚Äñ ^ 2 - l * ‚Äña‚Äñ ^ 2) / 2)) := by
    rw [div_mul_eq_mul_div, ‚Üê add_div, ‚Üê add_div, ‚Üê mul_div_assoc, div_left_inj']
    rw [norm_sub_sq_real, norm_smul, mul_pow, mul_add, sub_sub, mul_sub, ‚Üê mul_assoc, ‚Üê pow_two]
    rw [Real.norm_eq_abs, sq_abs, ‚Üê inv_eq_one_div, add_sub, add_sub_right_comm]
    rw [add_right_cancel_iff, norm_sub_sq_real, norm_sub_sq_real]
    rw [‚Üê mul_sub, mul_add, ‚Üê add_assoc, ‚Üê sub_sub, inner_smul_right]; simp
    rw [add_sub_right_comm]; simp; rw [mul_sub, ‚Üê add_sub_right_comm, ‚Üê add_sub_assoc]
    nth_rw 3 [‚Üê one_mul (‚Äñv‚Äñ ^ 2)]; rw [‚Üê add_mul, ‚Üê mul_assoc l, mul_comm l 2, sub_sub]
    rw [mul_assoc, ‚Üê mul_add, ‚Üê inner_smul_right _ _ l, ‚Üê inner_add_right]
    field_simp; simp
  constructor
  ¬∑ intro cond y
    specialize cond y
    rw [aux, aux]; simp; rw [‚Üê mul_add, ‚Üê mul_add, mul_le_mul_iff_right‚ÇÄ]
    linarith [cond]; simp; linarith
  ¬∑ intro cond y
    specialize cond y
    rw [aux, aux] at cond; simp at cond; rw [‚Üê mul_add, ‚Üê mul_add, mul_le_mul_iff_right‚ÇÄ] at cond
    linarith [cond]; simp; linarith

end properties

section

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [CompleteSpace E]

variable {s : Set E} {f : E ‚Üí ‚Ñù} {u x: E} {t : ‚Ñù}

/-
  u minimize the proximal at x iff x - u is subgradient
-/
theorem prox_iff_subderiv (f : E ‚Üí ‚Ñù) (hfun : ConvexOn ‚Ñù univ f) :
    ‚àÄ u : E, prox_prop f x u ‚Üî x - u ‚àà SubderivAt f u := by
  intro u; rw [prox_prop, ‚Üê HasSubgradientAt_zero_iff_isMinOn, mem_SubderivAt]
  let g := fun u ‚Ü¶ ‚Äñu - x‚Äñ ^ 2 / 2
  have hg : ConvexOn ‚Ñù Set.univ g := by apply convex_of_norm_sq x (convex_univ)
  have hcg : ContinuousOn g univ := by
    have h1 : Continuous (fun z : E => ‚Äñz - x‚Äñ) :=
      (continuous_id.sub continuous_const).norm
    have h2 : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2) := h1.pow 2
    have h3 : Continuous (fun z : E => ‚Äñz - x‚Äñ ^ 2 * (1 / 2)) := h2.mul continuous_const
    simp; exact Continuous.div_const h2 2
  show 0 ‚àà SubderivAt (f + g) u ‚Üî x - u ‚àà SubderivAt f u
  have : SubderivAt (f + g) u = SubderivAt (g + f) u := by
    unfold SubderivAt; ext z; rw [Set.mem_setOf, Set.mem_setOf];
    constructor
    repeat
    unfold HasSubgradientAt; intro hy y; specialize hy y; simp at hy ‚ä¢; linarith
  rw [this, ‚Üê SubderivAt.add hg hfun hcg]
  have subg : SubderivAt g u = {u - x} := by
    let g' := fun u ‚Ü¶ u - x
    have gderiv : ‚àÄ x, HasGradientAt g (g' x) x := gradient_of_sq
    have : SubderivWithinAt g univ u = {g' u} := by
      apply SubderivWithinAt_eq_gradient; simp
      have gconv : ConvexOn ‚Ñù univ g := by
        rcases hfun with ‚ü®conv, _‚ü©
        apply convex_of_norm_sq
        apply conv
      apply gconv; apply gderiv
    rw [‚Üê Subderivat_eq_SubderivWithinAt_univ, this]
  rw [subg]; simp

/-
  If f is differentiable and convex on E, then u minimize the proximal at x iff ‚àáf(u) = x - u
-/
theorem prox_iff_grad (f : E ‚Üí ‚Ñù) {f' : E ‚Üí E} (hfun : ConvexOn ‚Ñù univ f)
    (hdiff : ‚àÄ x, HasGradientAt f (f' x) x) :
    ‚àÄ u : E, prox_prop f x u ‚Üî f' u = x - u := by
  intro u
  have iff_subderiv : ‚àÄ u : E, prox_prop f x u ‚Üî x - u ‚àà SubderivAt f u := by
    apply prox_iff_subderiv
    apply hfun
  specialize iff_subderiv u
  rw [iff_subderiv, ‚Üê Subderivat_eq_SubderivWithinAt_univ]
  have subderiv_eq_gradient : SubderivWithinAt f univ u = {f' u} := by
    apply SubderivWithinAt_eq_gradient; simp
    apply hfun; apply hdiff
  rw [subderiv_eq_gradient]; simp
  apply eq_comm

/-
  If f is differentiable and convex on E, then u minimize the proximal for t*f at x iff
  t ‚àáf(u) = x - u
-/
theorem prox_iff_grad_smul (f : E ‚Üí ‚Ñù) {f' : E ‚Üí E} (t : ‚Ñù) (hfun : ConvexOn ‚Ñù univ f)
    (hdiff : ‚àÄ x, HasGradientAt f (f' x) x) (tnonneg : 0 ‚â§ t) :
    ‚àÄ u : E, prox_prop (t ‚Ä¢ f) x u ‚Üî t ‚Ä¢ f' u = x - u := by
  intro u
  let g := fun u ‚Ü¶ (t ‚Ä¢ f) u
  let g' := fun u ‚Ü¶ t ‚Ä¢ f' u
  have gconv : ConvexOn ‚Ñù univ g := by
    apply ConvexOn.smul tnonneg hfun
  have gderiv : ‚àÄ x, HasGradientAt g (g' x) x := by
    intro x
    simp only [Pi.smul_apply, g, g']
    apply HasGradientAt.const_smul'
    exact hdiff x
  rw [prox_iff_subderiv]
  have : SubderivWithinAt g univ u = {g' u} := by
      apply SubderivWithinAt_eq_gradient; simp
      apply gconv; apply gderiv
  rw [‚Üê Subderivat_eq_SubderivWithinAt_univ, this]; simp
  apply eq_comm
  apply gconv

/-
  u minimize the proximal for t*f at x iff (x - u)/t is subgradient
-/
theorem prox_iff_subderiv_smul (f : E ‚Üí ‚Ñù) {t : ‚Ñù} (hfun : ConvexOn ‚Ñù univ f) (ht : 0 < t) :
    ‚àÄ u : E, prox_prop (t ‚Ä¢ f) x u ‚Üî (1 / t) ‚Ä¢ (x - u) ‚àà (SubderivAt f u) := by
  intro u
  let g := fun u ‚Ü¶ (t ‚Ä¢ f) u
  have tnonneg : 0 ‚â§ t := by linarith
  have gconv : ConvexOn ‚Ñù univ g := by
    apply ConvexOn.smul tnonneg hfun
  rw [prox_iff_subderiv, ‚Üê mem_SubderivAt, ‚Üê mem_SubderivAt]
  rw [HasSubgradientAt, HasSubgradientAt]
  constructor
  ¬∑ intro cond y
    specialize cond y; simp at cond
    rw [inner_smul_left]; simp
    rw [‚Üê mul_le_mul_iff_right‚ÇÄ ht]; ring_nf; field_simp
    exact cond
  ¬∑ intro cond y
    specialize cond y
    have hmul0 := mul_le_mul_of_nonneg_left cond (le_of_lt ht)
    have hmul : t * f y ‚â• t * f u + t * ((1 / t) * ‚ü™x - u, y - u‚ü´_‚Ñù) := by
      simpa [mul_add, mul_assoc, inner_smul_left] using hmul0
    have htne : t ‚â† 0 := ne_of_gt ht
    have eqt : t * ((1 / t) * ‚ü™x - u, y - u‚ü´_‚Ñù) = ‚ü™x - u, y - u‚ü´_‚Ñù := by
      field_simp [htne]
    simp; grind
  exact gconv

end
